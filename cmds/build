#! /bin/bash


# Usage: build_describe
# Display description for this command wrapper.
build_describe() {
    echo "Build all the images of the OpenXT project using bitbake."
}

build_need_conf() { return 0; }

# Usage: build [mode]
# Build all the images of the OpenXT project using bitbake using the
# build-manifest file in CONF_DIR.
# modes:
#   clean: Run "cleanall" on the image recipe before building it.
build_main() {
    local mode=$1

    # Associative array (map) of env vars -> images
    declare -A targets

    pushd "${TOP}/${BUILD_DIR}" >/dev/null

    # Source build_env to get access to necessary OE variables.
    . "${TOP}/${BUILD_DIR}/build_env"

    # Overwrite the build timestamp.
    echo "OPENXT_BUILD_DATE=\"$(date '+%T %D')\"" > ${CONF_DIR}/openxt-build-date.conf

    while read image env ; do
        if [ -z "${image%%#*}" ]; then
            continue
        fi

        # sort env variables
        # awk converts to newlines
        # sort command sorts by newlines
        # xargs converts newlines back to spaces and removes empty newline
        env=$( echo $env | awk -v RS=' ' -v ORS="\n" '{print}' | sort | xargs )

        targets["$env"]="${targets[$env]} $image"

    done < "${CONF_DIR}/build-manifest"

    declare -a order

    # stubdom must be before dom0, so just build it first
    for env in "${!targets[@]}"; do
        case $env in
        *MACHINE=xenclient-stubdomain*)
            order=("$env" "${order[@]}")
            ;;
        *)
            order+=("$env")
            ;;
        esac
    done

    for env in "${order[@]}"; do
        local image=${targets[$env]}

        echo "Running $env bitbake $image"

        if [ "${mode}" = "clean" ]; then
            eval ${env} bitbake -c cleanall ${image}
        fi
        if ! env ${env} bitbake ${image} ; then
            echo "${env} bitbake \"${image}\" failed." >&2
            return 1
        fi

    done

    popd >/dev/null
}
